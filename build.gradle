apply plugin: 'java'
apply plugin: 'maven-publish'

group 'com.github.michelleg01'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}

//declararemos dos tareas para crear los archivos fuente y javadoc para nuestro proyecto
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
    from { configurations.compileOnly.collect { it.isDirectory() ? it : zipTree(it) } }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

//declararemos los artefactos para su publicación
artifacts {
    archives sourcesJar
}

//Los artefactos definidos se pueden firmar con nuestra clave GPG
/*signing {
    sign configurations.archives
}*/

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            /*artifact sourcesJar {
                classifier "sources"
            }*/

            groupId 'com.github.michelleg01'
            artifactId 'gradleExample'
            version '6.7.1'
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Framework Sofka')
                root.appendNode('name', 'Automation')
                root.children().last() + pomConfig
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username "michelleg21"
                password "Lalupe20151*"
            }
        }
    }
}

def pomConfig() {
    resolveStrategy = Closure.DELEGATE_FIRST
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'amolina'
        }
    }
}

/*model {
    //estableceremos una tarea para generar el pom del proyecto (sin publicarlo) en caso de que lo necesitemos
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    //creamos las tareas de publicación
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}*/

wrapper {
    gradleVersion '5.4.1'
    distributionType Wrapper.DistributionType.ALL
}